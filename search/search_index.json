{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Collab Template","text":"<p>A modern, collaborative Python project template with comprehensive tooling and best practices built-in.</p>"},{"location":"#template-features","title":"\ud83c\udfaf Template Features","text":"<p>This template provides everything you need for a professional Python project:</p> <ul> <li>\ud83d\udd27 Modern Tooling: UV package manager, Ruff formatting/linting, MyPy type checking</li> <li>\ud83e\uddea Testing: pytest with coverage reporting and CI integration</li> <li>\ud83d\udcda Documentation: Optional MkDocs + Material theme with auto-generation</li> <li>\ud83d\ude80 CI/CD: GitHub Actions with quality checks and automated deployment</li> <li>\ud83d\udc33 Development: Docker support and pre-commit hooks</li> <li>\ud83d\udce6 Packaging: Modern pyproject.toml configuration with hatchling</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#using-this-template","title":"Using This Template","text":"<ol> <li>Create a new repository from this template on GitHub</li> <li>Clone your new repository:    <pre><code>git clone https://github.com/your-username/your-project-name.git\ncd your-project-name\n</code></pre></li> <li>Initialize your project:    <pre><code>make init\n</code></pre></li> <li>Follow the prompts to customize your project</li> </ol>"},{"location":"#what-make-init-does","title":"What <code>make init</code> Does","text":"<p>The initialization script will: - Prompt for project name, description, and author information - Update all configuration files with your project details - Choose how to handle example code (keep, simplify, or remove) - Optionally set up MkDocs documentation (default: yes) - Rename directories and update imports - Set up git repository and pre-commit hooks</p>"},{"location":"#template-structure","title":"\ud83d\udcc1 Template Structure","text":"<pre><code>python-collab-template/\n\u251c\u2500\u2500 src/                        # Source code (renamed during init)\n\u251c\u2500\u2500 tests/                      # Test files\n\u251c\u2500\u2500 scripts/                    # Utility scripts (including init)\n\u251c\u2500\u2500 templates/                  # Documentation templates\n\u251c\u2500\u2500 docker/                     # Docker configuration\n\u251c\u2500\u2500 .github/workflows/          # CI/CD automation\n\u251c\u2500\u2500 pyproject.toml             # Project configuration\n\u251c\u2500\u2500 Makefile                   # Development commands\n\u2514\u2500\u2500 README.md                  # Project documentation\n</code></pre>"},{"location":"#available-commands","title":"\ud83d\udee0\ufe0f Available Commands","text":"<p>After initialization, your project will have these commands:</p> <ul> <li><code>make setup</code> - Set up development environment</li> <li><code>make test</code> - Run tests with coverage</li> <li><code>make check</code> - Run all quality checks</li> <li><code>make docs-serve</code> - Serve documentation locally (if enabled)</li> <li><code>make docs-build</code> - Build documentation (if enabled)</li> </ul> <p>For complete usage instructions, see the Getting Started guide.</p>"},{"location":"container-setup/","title":"Container Setup Guide","text":"<p>This project supports both Docker and Podman for containerized development.</p>"},{"location":"container-setup/#quick-start","title":"Quick Start","text":"<p>The Makefile automatically detects your container engine:</p> <pre><code># Automatic detection (prefers Podman if available)\nmake dev-env\n\n# Explicit engine selection\nCONTAINER_ENGINE=docker make dev-env\nCONTAINER_ENGINE=podman make dev-env\n</code></pre>"},{"location":"container-setup/#podman-vs-docker","title":"Podman vs Docker","text":""},{"location":"container-setup/#key-differences","title":"Key Differences","text":"Feature Docker Podman Root privileges Runs as root by default Rootless by default Daemon Requires dockerd daemon Daemonless Security Good with proper setup Better default security Compose support Native Via podman-compose"},{"location":"container-setup/#when-to-use-which","title":"When to Use Which","text":"<p>Use Docker when: - It's your team's standard - You need Docker Desktop features - You're using Docker-specific tooling</p> <p>Use Podman when: - Security is a top priority - You can't/don't want to run a daemon - You're in a restricted environment</p>"},{"location":"container-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"container-setup/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues with mounted volumes:</p> <ol> <li>For Podman: Should work automatically with rootless mode</li> <li>For Docker: Set your UID/GID in <code>docker/.env</code>:    <pre><code>echo \"UID=$(id -u)\" &gt;&gt; docker/.env\necho \"GID=$(id -g)\" &gt;&gt; docker/.env\n</code></pre></li> </ol>"},{"location":"container-setup/#socket-issues","title":"Socket Issues","text":"<p>If Podman can't find the Docker socket:</p> <pre><code># Set the socket path in your .env\necho \"DOCKER_SOCK=${XDG_RUNTIME_DIR}/podman/podman.sock\" &gt;&gt; docker/.env\n</code></pre>"},{"location":"container-setup/#compose-command-not-found","title":"Compose Command Not Found","text":"<p>For Podman, you need to install podman-compose:</p> <pre><code># macOS\nbrew install podman-compose\n\n# Linux\npip install podman-compose\n</code></pre>"},{"location":"container-setup/#podman-machine-not-running-macoswindows","title":"Podman Machine Not Running (macOS/Windows)","text":"<p>Podman needs a Linux VM to run containers. The Makefile will automatically start it, but you can also manage it manually:</p> <pre><code># Initialize a new machine\npodman machine init\n\n# Start the machine\npodman machine start\n\n# Check machine status\npodman machine list\n\n# Stop the machine\npodman machine stop\n</code></pre>"},{"location":"container-setup/#auto-setup-with-make","title":"Auto-Setup with Make","text":"<p>The project's Makefile handles most Podman setup automatically:</p> <ul> <li>Checks if Podman machine is running</li> <li>Starts it if needed</li> <li>Verifies podman-compose is installed</li> <li>Uses appropriate socket paths</li> </ul> <p>Just run <code>make container-info</code> to see the current status.</p>"},{"location":"container-setup/#compatibility-with-project-initialization","title":"Compatibility with Project Initialization","text":"<p>The container setup is designed to work both before and after running <code>make init</code>:</p>"},{"location":"container-setup/#before-make-init","title":"Before <code>make init</code>","text":"<ul> <li>Source code is in <code>src/</code> directory</li> <li>Container mounts entire project as <code>/workspace</code></li> <li>All development tools work normally</li> </ul>"},{"location":"container-setup/#after-make-init","title":"After <code>make init</code>","text":"<ul> <li>Source code moves to your project module directory (e.g., <code>my_project/</code>)</li> <li>Container setup continues to work unchanged</li> <li>Volume mounts and dependencies remain intact</li> </ul> <p>The <code>make init</code> command: 1. Renames <code>src/</code> to your project name 2. Updates import statements in tests 3. Modifies <code>pyproject.toml</code> and <code>Makefile</code></p> <p>The Docker/Podman setup survives this transformation because: - The Dockerfile doesn't hardcode directory names - Dependencies are installed from temporary copied files - The entire project is mounted, regardless of internal structure</p> <p>This means you can: <pre><code># Set up development environment\nmake dev-env\n\n# Initialize your project later\nmake init\n\n# Continue using the same development environment\nmake dev-env  # Still works!\n</code></pre></p>"},{"location":"getting-started/","title":"Getting Started with Python Collab Template","text":"<p>This guide walks you through using this template to create a new Python project.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git</li> <li>GitHub account (for template usage)</li> </ul>"},{"location":"getting-started/#creating-a-project-from-this-template","title":"Creating a Project from This Template","text":""},{"location":"getting-started/#step-1-create-repository-from-template","title":"Step 1: Create Repository from Template","text":"<ol> <li>Go to this template repository on GitHub</li> <li>Click \"Use this template\" button</li> <li>Choose \"Create a new repository\"</li> <li>Fill in your repository details:</li> <li>Repository name (e.g., <code>my-awesome-project</code>)</li> <li>Description</li> <li>Public/Private visibility</li> </ol>"},{"location":"getting-started/#step-2-clone-and-initialize","title":"Step 2: Clone and Initialize","text":"<ol> <li> <p>Clone your new repository:    <pre><code>git clone https://github.com/your-username/your-project-name.git\ncd your-project-name\n</code></pre></p> </li> <li> <p>Initialize your project:    <pre><code>make init\n</code></pre></p> </li> <li> <p>Follow the interactive prompts:</p> </li> <li>Project name: Enter your project name (e.g., \"My Awesome Project\")</li> <li>Description: Brief description of your project</li> <li>Author info: Your name and email (auto-detected from git config)</li> <li>Example code: Choose how to handle example code:<ul> <li>Keep (useful for reference)</li> <li>Minimal (basic working example)</li> <li>Remove (clean slate)</li> </ul> </li> <li>Documentation: Set up MkDocs documentation (default: yes)</li> <li>Pre-commit hooks: Enable quality checks on commit (default: yes)</li> </ol>"},{"location":"getting-started/#step-3-verify-setup","title":"Step 3: Verify Setup","text":"<p>After initialization, verify everything works:</p> <pre><code># Run all quality checks\nmake check\n\n# If you enabled documentation\nmake docs-serve\n</code></pre>"},{"location":"getting-started/#project-structure-after-initialization","title":"Project Structure After Initialization","text":"<p>Your initialized project will have:</p> <pre><code>your-project-name/\n\u251c\u2500\u2500 your_project_name/          # Main package (renamed from src/)\n\u251c\u2500\u2500 tests/                      # Test files\n\u251c\u2500\u2500 docs/                       # Documentation (if enabled)\n\u251c\u2500\u2500 .github/workflows/          # CI/CD workflows\n\u251c\u2500\u2500 pyproject.toml             # Project configuration\n\u251c\u2500\u2500 Makefile                   # Development commands\n\u2514\u2500\u2500 README.md                  # Project documentation\n</code></pre>"},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":""},{"location":"getting-started/#daily-development","title":"Daily Development","text":"<ol> <li>Make your changes to the code</li> <li>Add or update tests</li> <li>Run quality checks:    <pre><code>make check\n</code></pre></li> <li>Update documentation if needed</li> <li>Commit and push</li> </ol>"},{"location":"getting-started/#available-commands","title":"Available Commands","text":"<p>Your project comes with these make targets:</p> <ul> <li><code>make setup</code> - Set up development environment</li> <li><code>make test</code> - Run tests with coverage</li> <li><code>make lint</code> - Run linting with auto-fix</li> <li><code>make format</code> - Format code</li> <li><code>make mypy</code> - Run type checking</li> <li><code>make check</code> - Run all quality checks</li> <li><code>make docs-serve</code> - Serve documentation locally (if enabled)</li> <li><code>make docs-build</code> - Build documentation (if enabled)</li> <li><code>make docs-check</code> - Validate documentation build (if enabled)</li> </ul>"},{"location":"getting-started/#documentation-if-enabled","title":"Documentation (If Enabled)","text":"<p>If you chose to set up documentation:</p> <ol> <li> <p>Local development:    <pre><code>make docs-serve\n# Visit http://localhost:8000\n</code></pre></p> </li> <li> <p>Content organization:</p> </li> <li><code>docs/index.md</code> - Project homepage</li> <li><code>docs/getting-started.md</code> - User guide</li> <li> <p><code>docs/reference/api.md</code> - Auto-generated API docs</p> </li> <li> <p>GitHub Pages setup:</p> </li> <li>Go to repository Settings \u2192 Pages</li> <li>Set source to \"GitHub Actions\"</li> <li>Documentation will auto-deploy on main branch pushes</li> </ol>"},{"location":"getting-started/#cicd","title":"CI/CD","text":"<p>Your project includes GitHub Actions workflows:</p> <ul> <li>Quality checks (<code>tests.yml</code>): Runs on PRs and pushes</li> <li>Documentation (<code>docs.yml</code>): Deploys docs to GitHub Pages (if enabled)</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Update README.md with project-specific information</li> <li>Add your code in the main package directory</li> <li>Write tests for your functionality</li> <li>Update documentation to describe your project</li> <li>Set up GitHub Pages (if documentation enabled)</li> <li>Configure repository settings (branch protection, etc.)</li> </ol>"},{"location":"getting-started/#tips","title":"Tips","text":"<ul> <li>The template includes example code you can reference or remove</li> <li>All configuration follows modern Python best practices</li> <li>The documentation system auto-generates API docs from docstrings</li> <li>Pre-commit hooks ensure code quality before commits</li> <li>Use <code>make</code> commands for consistent development workflow</li> </ul>"},{"location":"reference/api/","title":"API Reference","text":"<p>This page contains the auto-generated API documentation for the project.</p>"},{"location":"reference/api/#src","title":"src","text":""}]}